+ Intro

Miniyacc, generates LALR(1) tables for LR parsers.
It is trivial to port to a new language and has
a smooth implementation (no optimizations).

+ Space saving strategy

The compression scheme used to store the actions
is a single displacement table.  It is described
in the dragon book and in

  R. Tarjan and A. Yao, "Storing a Sparse Table"
  CACM Vol. 22 No. 11, 1979, pp. 606-611

Before applying this compression scheme, we
remove the most common reduce from every row
and store it in a "default" table.  Error
actions become the default reduce, it is a
well-known harmless optimization: the error
will be detected later when no shift is
possible.

+ Tables generated by miniyacc

  - yyr1    rule -> arity of rhs
  - yyr2    rule -> lhs symbol
  - yydef   state -> default reduce (-1 if none)
  - yyadsp  displacements for actions in yyact
  - yygdsp  displacements for gotos in yyact
  - yyact   state ⨉ tok -> action
            state ⨉ symbol -> state
  - yychk   validation table for yyact

States are indexed starting from 1.  A postive
action is a shift action, the value of the action
is the destination state.  A negative action is
a reduce by the rule whose number is the opposite
of the action minus two.  A 0 action indicates
the default action.  This one is either -1,
indicating an error state, or a rule number to
reduce.  A -1 in the action table marks an
explicit parsing error.
